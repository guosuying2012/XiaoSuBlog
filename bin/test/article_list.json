{
    "data": [
        {
            "title": "<p>Welcome to nginx!</p>",
            "content": "<p>If you see this page, the nginx web server is successfully installed and working. Further configuration is required.</p> <p>For online documentation and support please refer to <a href='http://nginx.org/'>nginx.org</a>.<br/> Commercial support is available at <a href='http://nginx.com/'>nginx.com</a>.</p>......",
            "time": "July 30, 1996",
            "author": "GuoSuying",
            "travel": "C++",
            "comments": "109283",
            "image": "assets/img/home/1.jpg",
            "uuid": "1",
            "showtype": 0
        },
        {
            "title": "C++ 设计模式",
            "content": "1994 年，这几位大牛合著出版了一本名为《Design Patterns: Elements of Reusable Object-Oriented Software》（即：《设计模式》）的书。该书首次提到了软件开发中设计模式的概念，将设计模式提升到理论高度，并将之规范化。书中提及了 23 种基本设计模式，时至今日，在可复用面向对象软件的发展过程中，新的设计模式仍然不断出现。......",
            "time": "July 1, 2018",
            "author": "一去丶二三里",
            "travel": "C++",
            "comments": "29537",
            "image": "",
            "uuid": "2",
            "showtype": 1
        },
        {
            "title": "什么是Qt",
            "content": "Qt是一个针对桌面、嵌入式、移动设备的一个跨平台的应用程序开发框架，支持的平台包括Linux、OS X、Windows、VxWorks、QNX、Android、iOS、BlackBerry(黑莓)、Sailfish OS（旗鱼操作系统）等。Qt 1991年由Trolltech-奇趣科技（成立于1994年）开发，2008年，Trolltech被Nokia收购，2012年，Qt被Digia收购。Qt是基于C++编写的框架，它既可以开发GUI程序，也可用于开发非GUI程序，比如控制台工具和服务器。预处理器，MOC（全称：Meta-Object Compiler-元对象编译器）用于扩展C++，如：信号和槽的特性。在编译之前，先使用MOC分析Qt扩展的C++源文件（检测是否包含Q_OBJECT宏），然后生成符合C++标准的源文件（新文件名将会由moc_加上原文件名构成）。因此框架本身和应用程序/库使用它能被任何符合标准C++的编译器（像Clang、GCC、 ICC、MinGW 和MSVC）所编译。...... ",
            "time": "July 15, 20019",
            "author": "一去丶二三里",
            "travel": "Qt",
            "comments": "1",
            "image": "assets/img/home/6.jpg",
            "uuid": "3",
            "showtype": 0
        },
        {
            "title": "OkHttp源码理解",
            "content": "cleanupRunnable中执行清理任务是通过cleanup方法来完成，cleanup方法会返回下次需要清理的间隔时间，然后会调用wait方法释放锁和时间片。等时间到了就再次进行清理。通过每个连接的引用计数对象StreamAllocation的计数来回收空闲的连接，向连接池添加新的连接时会触发执行清理空闲连接的任务。清理空闲连接的任务通过线程池来执行。...... ",
            "time": "July 30, 2016",
            "author": "ai-exception",
            "travel": "Android",
            "comments": "49",
            "image": "assets/img/home/2.jpg",
            "uuid": "4",
            "showtype": 1
        }
    ]
}